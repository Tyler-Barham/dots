# shellcheck shell=bash

alias rsync='rsync -ah --info=progress2 --info=name0'
alias vimdiff='nvim -d'
alias chafa='chafa -f sixels'

function silent() { "$@" >/dev/null 2>&1; }

function make() {
    # Bypass bear
    if [[ "$*" == *"clean"* ]]; then
        /usr/bin/make $*
        return $?
    fi

    # Setup bear args
    bear_cmd=""
    if [[ $(bear --version 2>/dev/null) == "bear 2"* ]]; then
        bear_cmd="bear --append"
    elif [[ $(bear --version 2>/dev/null) == "bear 3"* ]]; then
        bear_cmd="bear --append --"
    fi

    # Call make, conditionally with bear
    $bear_cmd /usr/bin/make $*
}

if [[ "$(cat /proc/$$/comm)" == "bash" ]]; then
    export -f make
elif [[ "$(cat /proc/$$/comm)" == "zsh" ]]; then
    setopt shwordsplit
fi

function ips() {
    local ifaces=($(ip -br a | awk -F '[[:space:]]+' '{if ($2=="UP") {print $1}}'))
    for ifa in ${ifaces[@]}; do
        if [[ "$ifa" == "docker"* || "$ifa" == *"tun"* || "$ifa" == "lo" ]]; then
            continue;
        fi
        sudo arp-scan --interface "$ifa" --localnet --plain;
    done
}
function lg() { lazygit; }
function lzd() { lazydocker; }
function mkcd() { mkdir -p "$@" && cd "$@" || return; }
function cleantmp() { sudo find /tmp/* -maxdepth 0 -mtime +2 -exec rm -rf {} \;; }
function vimit() { if [[ -r $1 ]]; then nvim "$1"; else nvim "$(which "$1")"; fi; }
function ducks() { du -cksh ./* | sort -hr | head -n 15; }

# SVC
function gup() { git fetch && git pull && git submodule update --recursive; }
function git-clean-br() { git fetch -p && for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'); do git branch -D "$branch"; done; }

# Conda
function conda-pyv() { conda env list | grep -v "^$\|#" | awk '{print $1;}' | xargs -I{} -d "\n" sh -c 'printf "Env: {}\t"; conda list -n {} | grep "^python\s";'; }

# Docker
function docker-restart() { sudo systemctl restart docker && docker start "$(docker ps -a -q --filter "status=exited")"; }
function docker-up() { docker start "$(docker ps -a -q --filter "status=exited")"; }
function docker-rm-exited() { docker rm "$(docker ps -a -q --filter "status=exited")"; }
function docker-ip() { docker inspect -f '{{.Name}}: {{.HostConfig.NetworkMode}} @ {{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -a -q); }

