#!/bin/bash

# Shows Docker containers with GPU processes

#                  gpu  pid  util mem  command
output_format="    %-4s %-8s %-8s %-8s %s\n"
output_width=$(tput cols)

# Get running container IDs and names
containers=$(docker ps --format '{{.ID}} {{.Names}}')

echo_trim() {
    text="$@"
    if [ "${#text}" -gt "$output_width" ]; then
        # Subtract 3 to account for '...'
        echo "${text:0:output_width-3}..."
    else
        echo "$text"
    fi
}

if [[ -z "$containers" ]]; then
    echo_trim "No running containers."
    exit 0
fi

# Loop through containers
while read -r cid cname; do
    # Get PIDs of processes inside the container
    pids=$(docker top "$cid" -eo pid | tail -n +2)
    # Get list of all nvidia processes
    readarray -t gpu_processes < <(nvidia-smi pmon -c 1 -s um | tail -n +3)

    output_lines=()
    for line in "${gpu_processes[@]}"; do
        read -r gpu pid type sm mem enc dec jpg ofa fb ccpm command <<< "$line"
        # Check if this PID is inside the container
        for cpid in $pids; do
            if [[ "$pid" == "$cpid" ]]; then
                if [[ -r /proc/$pid/cmdline ]]; then
                    cmd_args=$(tr '\0' ' ' < /proc/$pid/cmdline)
                else
                    cmd_args="$command"
                fi

                output=$(printf "$output_format" "$gpu" "$pid" "$sm" "$fb" "$cmd_args")
                output_lines+=("$output")
            fi
        done
    done

    echo_trim "Container: $cname ($cid)"

    # Print processes or fallback
    if [ ${#output_lines[@]} -eq 0 ]; then
        echo_trim "    No GPU processes"
    else
        printf "$output_format" "GPU" "PID" "UTIL" "MEM" "COMMAND"
        for l in "${output_lines[@]}"; do
            echo_trim "$l"
        done
    fi

done <<< "$containers"

